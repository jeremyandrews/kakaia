use std::collections::HashSet;

#[derive(Debug, Clone)]
pub struct StopWords {
    set: HashSet<String>,
}

pub struct Tokens<'a> {
    pub unfiltered: Vec<&'a str>,
    pub filtered: Vec<&'a str>,
}

impl StopWords {
    // Derived from http://xpo6.com/list-of-english-stop-words/
    pub fn new() -> Self {
        let mut stopwords = HashSet::new();
        stopwords.insert("a".to_string());
        stopwords.insert("about".to_string());
        stopwords.insert("above".to_string());
        stopwords.insert("across".to_string());
        stopwords.insert("after".to_string());
        stopwords.insert("afterwards".to_string());
        stopwords.insert("again".to_string());
        stopwords.insert("against".to_string());
        stopwords.insert("all".to_string());
        stopwords.insert("almost".to_string());
        stopwords.insert("alone".to_string());
        stopwords.insert("along".to_string());
        stopwords.insert("already".to_string());
        stopwords.insert("also".to_string());
        stopwords.insert("although".to_string());
        stopwords.insert("always".to_string());
        stopwords.insert("am".to_string());
        stopwords.insert("among".to_string());
        stopwords.insert("amongst".to_string());
        stopwords.insert("amoungst".to_string());
        stopwords.insert("amount".to_string());
        stopwords.insert("an".to_string());
        stopwords.insert("and".to_string());
        stopwords.insert("another".to_string());
        stopwords.insert("any".to_string());
        stopwords.insert("anyhow".to_string());
        stopwords.insert("anyone".to_string());
        stopwords.insert("anything".to_string());
        stopwords.insert("anyway".to_string());
        stopwords.insert("anywhere".to_string());
        stopwords.insert("are".to_string());
        stopwords.insert("around".to_string());
        stopwords.insert("as".to_string());
        stopwords.insert("at".to_string());
        stopwords.insert("back".to_string());
        stopwords.insert("be".to_string());
        stopwords.insert("became".to_string());
        stopwords.insert("because".to_string());
        stopwords.insert("become".to_string());
        stopwords.insert("becomes".to_string());
        stopwords.insert("becoming".to_string());
        stopwords.insert("been".to_string());
        stopwords.insert("before".to_string());
        stopwords.insert("beforehand".to_string());
        stopwords.insert("behind".to_string());
        stopwords.insert("being".to_string());
        stopwords.insert("below".to_string());
        stopwords.insert("beside".to_string());
        stopwords.insert("besides".to_string());
        stopwords.insert("between".to_string());
        stopwords.insert("beyond".to_string());
        stopwords.insert("bill".to_string());
        stopwords.insert("both".to_string());
        stopwords.insert("bottom".to_string());
        stopwords.insert("but".to_string());
        stopwords.insert("by".to_string());
        stopwords.insert("call".to_string());
        stopwords.insert("can".to_string());
        stopwords.insert("cannot".to_string());
        stopwords.insert("cant".to_string());
        stopwords.insert("co".to_string());
        stopwords.insert("con".to_string());
        stopwords.insert("could".to_string());
        stopwords.insert("couldnt".to_string());
        stopwords.insert("cry".to_string());
        stopwords.insert("de".to_string());
        stopwords.insert("describe".to_string());
        stopwords.insert("detail".to_string());
        stopwords.insert("do".to_string());
        stopwords.insert("done".to_string());
        //stopwords.insert("down".to_string());
        stopwords.insert("due".to_string());
        stopwords.insert("during".to_string());
        stopwords.insert("each".to_string());
        stopwords.insert("eg".to_string());
        //stopwords.insert("eight".to_string());
        stopwords.insert("either".to_string());
        //stopwords.insert("eleven".to_string());
        stopwords.insert("else".to_string());
        stopwords.insert("elsewhere".to_string());
        stopwords.insert("empty".to_string());
        stopwords.insert("enough".to_string());
        stopwords.insert("etc".to_string());
        stopwords.insert("even".to_string());
        stopwords.insert("ever".to_string());
        stopwords.insert("every".to_string());
        stopwords.insert("everyone".to_string());
        stopwords.insert("everything".to_string());
        stopwords.insert("everywhere".to_string());
        stopwords.insert("except".to_string());
        stopwords.insert("few".to_string());
        //stopwords.insert("fifteen".to_string());
        //stopwords.insert("fify".to_string());
        stopwords.insert("fill".to_string());
        stopwords.insert("find".to_string());
        stopwords.insert("fire".to_string());
        stopwords.insert("first".to_string());
        //stopwords.insert("five".to_string());
        stopwords.insert("for".to_string());
        stopwords.insert("former".to_string());
        stopwords.insert("formerly".to_string());
        //stopwords.insert("forty".to_string());
        stopwords.insert("found".to_string());
        //stopwords.insert("four".to_string());
        stopwords.insert("from".to_string());
        stopwords.insert("front".to_string());
        stopwords.insert("full".to_string());
        stopwords.insert("further".to_string());
        stopwords.insert("get".to_string());
        stopwords.insert("give".to_string());
        stopwords.insert("go".to_string());
        stopwords.insert("had".to_string());
        stopwords.insert("has".to_string());
        stopwords.insert("hasnt".to_string());
        stopwords.insert("have".to_string());
        stopwords.insert("he".to_string());
        stopwords.insert("hence".to_string());
        stopwords.insert("her".to_string());
        stopwords.insert("here".to_string());
        stopwords.insert("hereafter".to_string());
        stopwords.insert("hereby".to_string());
        stopwords.insert("herein".to_string());
        stopwords.insert("hereupon".to_string());
        stopwords.insert("hers".to_string());
        stopwords.insert("herself".to_string());
        stopwords.insert("him".to_string());
        stopwords.insert("himself".to_string());
        stopwords.insert("his".to_string());
        stopwords.insert("how".to_string());
        stopwords.insert("however".to_string());
        //stopwords.insert("hundred".to_string());
        stopwords.insert("ie".to_string());
        stopwords.insert("if".to_string());
        stopwords.insert("in".to_string());
        stopwords.insert("inc".to_string());
        stopwords.insert("indeed".to_string());
        stopwords.insert("interest".to_string());
        stopwords.insert("into".to_string());
        stopwords.insert("is".to_string());
        stopwords.insert("it".to_string());
        stopwords.insert("its".to_string());
        stopwords.insert("itself".to_string());
        stopwords.insert("keep".to_string());
        stopwords.insert("last".to_string());
        stopwords.insert("latter".to_string());
        stopwords.insert("latterly".to_string());
        stopwords.insert("least".to_string());
        stopwords.insert("less".to_string());
        stopwords.insert("ltd".to_string());
        stopwords.insert("made".to_string());
        stopwords.insert("many".to_string());
        stopwords.insert("may".to_string());
        stopwords.insert("me".to_string());
        stopwords.insert("meanwhile".to_string());
        stopwords.insert("might".to_string());
        stopwords.insert("mill".to_string());
        stopwords.insert("mine".to_string());
        stopwords.insert("more".to_string());
        stopwords.insert("moreover".to_string());
        stopwords.insert("most".to_string());
        stopwords.insert("mostly".to_string());
        stopwords.insert("move".to_string());
        stopwords.insert("much".to_string());
        stopwords.insert("must".to_string());
        stopwords.insert("my".to_string());
        stopwords.insert("myself".to_string());
        stopwords.insert("name".to_string());
        stopwords.insert("namely".to_string());
        stopwords.insert("neither".to_string());
        stopwords.insert("never".to_string());
        stopwords.insert("nevertheless".to_string());
        stopwords.insert("next".to_string());
        //stopwords.insert("nine".to_string());
        stopwords.insert("no".to_string());
        stopwords.insert("nobody".to_string());
        stopwords.insert("none".to_string());
        stopwords.insert("noone".to_string());
        stopwords.insert("nor".to_string());
        stopwords.insert("not".to_string());
        stopwords.insert("nothing".to_string());
        stopwords.insert("now".to_string());
        stopwords.insert("nowhere".to_string());
        stopwords.insert("of".to_string());
        stopwords.insert("off".to_string());
        stopwords.insert("often".to_string());
        stopwords.insert("on".to_string());
        stopwords.insert("once".to_string());
        //stopwords.insert("one".to_string());
        stopwords.insert("only".to_string());
        stopwords.insert("onto".to_string());
        stopwords.insert("or".to_string());
        stopwords.insert("other".to_string());
        stopwords.insert("others".to_string());
        stopwords.insert("otherwise".to_string());
        stopwords.insert("our".to_string());
        stopwords.insert("ours".to_string());
        stopwords.insert("ourselves".to_string());
        stopwords.insert("out".to_string());
        stopwords.insert("over".to_string());
        stopwords.insert("own".to_string());
        stopwords.insert("part".to_string());
        stopwords.insert("per".to_string());
        stopwords.insert("perhaps".to_string());
        stopwords.insert("please".to_string());
        stopwords.insert("put".to_string());
        stopwords.insert("rather".to_string());
        stopwords.insert("re".to_string());
        stopwords.insert("same".to_string());
        stopwords.insert("see".to_string());
        stopwords.insert("seem".to_string());
        stopwords.insert("seemed".to_string());
        stopwords.insert("seeming".to_string());
        stopwords.insert("seems".to_string());
        stopwords.insert("serious".to_string());
        stopwords.insert("several".to_string());
        stopwords.insert("she".to_string());
        stopwords.insert("should".to_string());
        stopwords.insert("show".to_string());
        stopwords.insert("side".to_string());
        stopwords.insert("since".to_string());
        stopwords.insert("sincere".to_string());
        //stopwords.insert("six".to_string());
        //stopwords.insert("sixty".to_string());
        stopwords.insert("so".to_string());
        stopwords.insert("some".to_string());
        stopwords.insert("somehow".to_string());
        stopwords.insert("someone".to_string());
        stopwords.insert("something".to_string());
        stopwords.insert("sometime".to_string());
        stopwords.insert("sometimes".to_string());
        stopwords.insert("somewhere".to_string());
        stopwords.insert("still".to_string());
        stopwords.insert("such".to_string());
        stopwords.insert("system".to_string());
        stopwords.insert("take".to_string());
        //stopwords.insert("ten".to_string());
        stopwords.insert("than".to_string());
        stopwords.insert("that".to_string());
        stopwords.insert("the".to_string());
        stopwords.insert("their".to_string());
        stopwords.insert("them".to_string());
        stopwords.insert("themselves".to_string());
        stopwords.insert("then".to_string());
        stopwords.insert("thence".to_string());
        stopwords.insert("there".to_string());
        stopwords.insert("thereafter".to_string());
        stopwords.insert("thereby".to_string());
        stopwords.insert("therefore".to_string());
        stopwords.insert("therein".to_string());
        stopwords.insert("thereupon".to_string());
        stopwords.insert("these".to_string());
        stopwords.insert("they".to_string());
        stopwords.insert("thick".to_string());
        stopwords.insert("thin".to_string());
        stopwords.insert("third".to_string());
        stopwords.insert("this".to_string());
        stopwords.insert("those".to_string());
        stopwords.insert("though".to_string());
        //stopwords.insert("three".to_string());
        stopwords.insert("through".to_string());
        stopwords.insert("throughout".to_string());
        stopwords.insert("thru".to_string());
        stopwords.insert("thus".to_string());
        stopwords.insert("to".to_string());
        stopwords.insert("together".to_string());
        stopwords.insert("too".to_string());
        stopwords.insert("top".to_string());
        stopwords.insert("toward".to_string());
        stopwords.insert("towards".to_string());
        //stopwords.insert("twelve".to_string());
        //stopwords.insert("twenty".to_string());
        //stopwords.insert("two".to_string());
        stopwords.insert("un".to_string());
        stopwords.insert("under".to_string());
        stopwords.insert("until".to_string());
        //stopwords.insert("up".to_string());
        stopwords.insert("upon".to_string());
        stopwords.insert("us".to_string());
        stopwords.insert("very".to_string());
        stopwords.insert("via".to_string());
        stopwords.insert("was".to_string());
        stopwords.insert("we".to_string());
        stopwords.insert("well".to_string());
        stopwords.insert("were".to_string());
        stopwords.insert("what".to_string());
        stopwords.insert("whatever".to_string());
        stopwords.insert("when".to_string());
        stopwords.insert("whence".to_string());
        stopwords.insert("whenever".to_string());
        stopwords.insert("where".to_string());
        stopwords.insert("whereafter".to_string());
        stopwords.insert("whereas".to_string());
        stopwords.insert("whereby".to_string());
        stopwords.insert("wherein".to_string());
        stopwords.insert("whereupon".to_string());
        stopwords.insert("wherever".to_string());
        stopwords.insert("whether".to_string());
        stopwords.insert("which".to_string());
        stopwords.insert("while".to_string());
        stopwords.insert("whither".to_string());
        stopwords.insert("who".to_string());
        stopwords.insert("whoever".to_string());
        stopwords.insert("whole".to_string());
        stopwords.insert("whom".to_string());
        stopwords.insert("whose".to_string());
        stopwords.insert("why".to_string());
        stopwords.insert("will".to_string());
        stopwords.insert("with".to_string());
        stopwords.insert("within".to_string());
        stopwords.insert("without".to_string());
        stopwords.insert("yourselves".to_string());
        StopWords {
            set: stopwords,
        }
    }

    pub fn filter<'a>(&self, mut filter: Vec<&'a str>) -> Tokens<'a> {
        // remove stopwords from tokenized text
        let mut i = 0;
        let mut filtered: Vec<&str> = vec![];
        while i != filter.len() {
            let needle = filter[i].to_string();
            if self.set.contains(&needle) {
                filtered.push(filter.remove(i));
            } else {
                i += 1;
            }
        }
        Tokens {
            unfiltered: filter,
            filtered: filtered,
        }
    }
}
